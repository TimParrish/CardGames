{"version":3,"sources":["GameComponents/Blackjack.js","styles/navStyle.js","styles/footerStyle.js","GameComponents/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["player_hand","GameControlsDiv","styled","div","DisplayCardsDiv","DisplayCardsInHand","type","Blackjack","useState","deckId","setDeckId","setShuffled","cardsRemaining","setCardsRemaining","src","alt","ButtonGroup","aria-label","size","center","Button","variant","onClick","axios","get","then","result","data","success","console","log","deck_id","shuffled","remaining","catch","error","card","cards","drawn_card","value","suit","imageURL","image","cardCode","code","push","err","StyledLink","NavLink","NavBarContainer","StyledFooter","NavBar","to","document","title","App","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ae8864d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n// import { CardsOnFire } from \"images\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, ButtonGroup } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nlet player_hand = [];\n// let dealer_hand = new Array();\n\nconst GameControlsDiv = styled.div`\n  height: 150px;\n  width: 450px;\n  margin: auto;\n  p {\n    text-align: center;\n  }\n`;\n\nconst DisplayCardsDiv = styled.div`\n  height: 350px;\n  width: 850px;\n  margin: auto;\n`;\n\nconst DisplayCardsInHand = styled.div`\n  width: 400px;\n  float: ${({ type }) => (type === \"player\" ? \"left\" : \"right\")};\n  background-color: ${({ type }) =>\n    type === \"player\" ? \"darkgreen\" : \"darkblue\"};\n  h2 {\n    text-align: center;\n    background-color: lightgrey;\n  }\n  img {\n    height: 30%;\n    width: 30%;\n    float: left;\n  }\n  padding: 10px;\n`;\n\nfunction Blackjack() {\n  const [deckId, setDeckId] = useState(\"\");\n  const [shuffled, setShuffled] = useState(\"\");\n  const [cardsRemaining, setCardsRemaining] = useState(\"\");\n  //   const [playerNumberWins, setPlayerNumberWins] = useState(0);\n  //   const [dealerNumberWins, setDealerNumberWins] = useState(0);\n  void shuffled;\n\n  // Create a new deck of cards and store the deck id for future API calls\n  function startNewGame() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n      .then(result => {\n        result.data.success && console.log(\"The result was a success!!\");\n\n        setDeckId(result.data.deck_id);\n        setShuffled(result.data.shuffled);\n        setCardsRemaining(result.data.remaining);\n      })\n      .catch(error => console.log(error));\n  }\n\n  function drawCard() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`)\n      .then(result => {\n        result.data.success && console.log(`We successfully drew cards!!`);\n\n        setShuffled(result.data.shuffled);\n        setCardsRemaining(result.data.remaining);\n        try {\n          let card = result.data.cards[0];\n          let drawn_card = {\n            value: `${card.value}`,\n            suit: `${card.suit}`,\n            imageURL: `${card.image}`,\n            cardCode: `${card.code}`\n          };\n          player_hand.push(drawn_card);\n          console.log(player_hand[0]);\n        } catch (err) {\n          console.log(\"failed to parse JSON for desired values\");\n        }\n      });\n  }\n\n  function computeHand() {\n    console.log(\"TODO: add logic for the game here\");\n    //clear cards in hand\n  }\n\n  return (\n    <>\n      <DisplayCardsDiv>\n        <DisplayCardsInHand type=\"player\">\n          <h2>Player Cards</h2>\n          <img\n            src={`https://deckofcardsapi.com/static/img/KS.png`}\n            // src={`${player_hand[0].imageURL}`}\n            alt={\"hello\"}\n            // alt={`${player_hand[0].value} of ${player_hand[0].suit}`}\n          />\n          <img\n            src={`https://deckofcardsapi.com/static/img/QS.png`}\n            // src={`${player_hand[0].imageURL}`}\n            alt={\"hello\"}\n            // alt={`${player_hand[0].value} of ${player_hand[0].suit}`}\n          />\n          <img\n            src={`https://deckofcardsapi.com/static/img/JS.png`}\n            // src={`${player_hand[0].imageURL}`}\n            alt={\"hello\"}\n            // alt={`${player_hand[0].value} of ${player_hand[0].suit}`}\n          />\n        </DisplayCardsInHand>\n        <DisplayCardsInHand>\n          <h2>Dealer Cards</h2>\n          <img\n            src={`https://deckofcardsapi.com/static/img/AH.png`}\n            // src={`${player_hand[0].imageURL}`}\n            alt={\"hello\"}\n            // alt={`${player_hand[0].value} of ${player_hand[0].suit}`}\n          />\n          <img\n            src={`https://deckofcardsapi.com/static/img/AC.png`}\n            // src={`${player_hand[0].imageURL}`}\n            alt={\"hello\"}\n            // alt={`${player_hand[0].value} of ${player_hand[0].suit}`}\n          />\n        </DisplayCardsInHand>\n      </DisplayCardsDiv>\n\n      <GameControlsDiv>\n        <ButtonGroup aria-label=\"Game Control Buttons\" size=\"lg\" center>\n          <Button variant=\"secondary\" onClick={startNewGame}>\n            New Game\n          </Button>\n          <Button variant=\"secondary\" onClick={drawCard}>\n            Hit\n          </Button>\n          <Button variant=\"secondary\" onClick={computeHand}>\n            Stay\n          </Button>\n        </ButtonGroup>\n\n        <p>The deck ID is: {deckId}</p>\n        <p>Total cards remaining in the deck: {cardsRemaining}</p>\n\n        {/* <p>{data}</p> */}\n        {/* <Image src={CardsOnFire} rounded />\n      <p>Photo by Julius Drost on Unsplash</p> */}\n      </GameControlsDiv>\n    </>\n  );\n}\n\nexport default Blackjack;\n","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const StyledLink = styled(NavLink)`\n  font-size: 12px;\n  color: white;\n  font-family: helvetica;\n  text-transform: uppercase;\n  text-decoration: none;\n  background-color: darkgreen;\n  display: block;\n  padding: 10px 34px;\n  transition: all 1s linear;\n  box-shadow: inset 0px 0px 30px #888;\n  border-right: ${({ type }) => (type === \"last\" ? \"0\" : \"1px solid #ccc\")};\n  &:hover {\n    background-color: #eee;\n    color: #333;\n    box-shadow: inset 0px 0px 30px #ccc;\n`;\n\nexport const NavBarContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 25px auto 25px auto;\n  width: 700px;\n  height: 38px;\n  padding: 0px;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledFooter = styled.div`\n  height: 100px;\n  background-color: pink;\n  width: 750px;\n  margin: auto;\n  p {\n    text-align: center;\n    padding: 15px;\n  }\n`;\n","import React from \"react\";\nimport { StyledLink, NavBarContainer } from \"styles\";\n\nfunction NavBar() {\n  return (\n    <>\n      <NavBarContainer>\n        <StyledLink type=\"first\" to=\"/card-games/\">\n          View All Games\n        </StyledLink>\n        <StyledLink to=\"/card-games/blackjack\">Blackjack</StyledLink>\n        <StyledLink type=\"last\" to=\"/card-games/solitaire\">\n          solitaire\n        </StyledLink>\n      </NavBarContainer>\n    </>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Blackjack, NavBar } from \"./GameComponents\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { StyledFooter } from \"styles\";\nimport \"./styles/background.css\";\n\ndocument.title = \"React Card Games\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <Switch>\n        {/* <Route path=\"/card-games/\" component={SelectGame} exact /> */}\n        {/* <Route path=\"/card-games/blackjack\" component={Blackjack} />\n        <Route path=\"/card-games/solitaire\" component={Solitaire} /> */}\n        <Route component={Blackjack} />\n      </Switch>\n      <StyledFooter>\n        <p>Check out the source code on github!</p>\n      </StyledFooter>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}