{"version":3,"sources":["images/julius-drost-C8wlYF8ubBo-unsplash.jpg","styles/navStyle.js","styles/footerStyle.js","styles/displayCardsStyle.js","styles/gameControlsStyle.js","GameComponents/Blackjack.js","GameComponents/War.js","GameComponents/Homepage.js","GameComponents/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledLink","styled","NavLink","type","NavBarContainer","div","StyledFooter","DisplayCardsDiv","DisplayHand","GameControlsDiv","GameControlsButtonDiv","GameControlButton","button","player_hand","dealer_hand","Blackjack","useState","deckId","setDeckId","cardsRemaining","setCardsRemaining","playerHandValue","setPlayerHandValue","dealerHandValue","setDealerHandValue","playerAceCount","setPlayerAceCount","dealerAceCount","setDealerAceCount","playerNumberWins","setPlayerNumberWins","dealerNumberWins","setDealerNumberWins","dealerFirstCardURL","setDealerFirstCardURL","dealerCardHidden","setDealerCardHidden","updateRender","hiddenCardImage","CardsOnFire","newRound","n","computeHand","a","console","log","sleepDelay","drawDealer","axios","get","then","result","data","success","remaining","card","cards","drawn_card","value","suit","imageURL","image","cardCode","code","Number","push","length","err","ms","Promise","resolve","setTimeout","map","src","alt","onClick","deck_id","catch","error","player_pile","player_card","dealer_pile","dealer_card","War","setShuffled","shuffled","i","drawn_card1","drawn_card2","pop","Homepage","NavBar","to","document","title","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.68f1ab9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/julius-drost-C8wlYF8ubBo-unsplash.b3dc39d0.jpg\";","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const StyledLink = styled(NavLink)`\n  font-size: 12px;\n  color: white;\n  font-family: helvetica;\n  text-transform: uppercase;\n  text-decoration: none;\n  background-color: darkgreen;\n  display: block;\n  padding: 10px 34px;\n  transition: all 1s linear;\n  box-shadow: inset 0px 0px 30px #888;\n  border-right: ${({ type }) => (type === \"last\" ? \"0\" : \"1px solid #ccc\")};\n  &:hover {\n    background-color: #eee;\n    color: #333;\n    box-shadow: inset 0px 0px 30px #ccc;\n  }\n`;\n\nexport const NavBarContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 25px auto 25px auto;\n  width: 700px;\n  height: 38px;\n  padding: 0px;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledFooter = styled.div`\n  height: 100px;\n  background-color: grey;\n  width: 750px;\n  margin: auto;\n  p {\n    text-align: center;\n    padding: 15px;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const DisplayCardsDiv = styled.div`\n  width: 850px;\n  margin: auto;\n`;\n\nexport const DisplayHand = styled.div`\n  width: 400px;\n  float: ${({ type }) => (type === \"player\" ? \"left\" : \"right\")};\n  background-color: ${({ type }) =>\n    type === \"player\" ? \"darkgreen\" : \"#4F265B\"};\n  h2 {\n    text-align: center;\n    background-color: lightgrey;\n  }\n  img {\n    padding: 5px;\n    height: 175px;\n    width: 123px;\n    float: left;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const GameControlsDiv = styled.div`\n  padding: 15px;\n  width: 450px;\n  margin: auto;\n  p {\n    padding-top: 5px;\n    text-align: center;\n  }\n  background-color: white;\n  border-radius: 10px;\n`;\n\nexport const GameControlsButtonDiv = styled.div`\n  height: 40px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nexport const GameControlButton = styled.button`\n  width: 125px;\n  background-color: lightgreen;\n  padding: 10px;\n  margin-top: 10px;\n  border-radius: 5px;\n  &:hover {\n    background-color: orange;\n    box-shadow: inset 0px 0px 30px #ccc;\n  }\n`;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { CardsOnFire } from \"images\";\nimport {\n  DisplayHand,\n  DisplayCardsDiv,\n  GameControlsDiv,\n  GameControlsButtonDiv,\n  GameControlButton\n} from \"styles\";\n\nlet player_hand = [];\nlet dealer_hand = [];\n\nfunction Blackjack() {\n  const [deckId, setDeckId] = useState(0);\n  const [cardsRemaining, setCardsRemaining] = useState(0);\n  const [playerHandValue, setPlayerHandValue] = useState(0);\n  const [dealerHandValue, setDealerHandValue] = useState(0);\n  const [playerAceCount, setPlayerAceCount] = useState(0);\n  const [dealerAceCount, setDealerAceCount] = useState(0);\n  const [playerNumberWins, setPlayerNumberWins] = useState(0);\n  const [dealerNumberWins, setDealerNumberWins] = useState(0);\n  const [dealerFirstCardURL, setDealerFirstCardURL] = useState(\"\");\n  const [dealerCardHidden, setDealerCardHidden] = useState(true);\n  const [, updateRender] = useState(\"\");\n  const hiddenCardImage = CardsOnFire;\n\n  // Create a new deck of cards and store the deck id for future API calls\n  function startNewGame() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n      .then(result => {\n        result.data.success && console.log(\"The result was a success!!\");\n\n        setDeckId(result.data.deck_id);\n        setCardsRemaining(result.data.remaining);\n        newRound();\n      })\n      .catch(error => console.log(error));\n  }\n\n  function newRound() {\n    player_hand = [];\n    dealer_hand = [];\n    setPlayerAceCount(0);\n    setDealerAceCount(0);\n    setDealerHandValue(0);\n    setPlayerHandValue(0);\n    setDealerCardHidden(\"\");\n    updateRender(n => !n);\n  }\n\n  function drawCard() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`)\n      .then(result => {\n        result.data.success && console.log(`We successfully drew cards!!`);\n\n        setCardsRemaining(result.data.remaining);\n        try {\n          let card = result.data.cards[0];\n          //create a card object to push onto the player or dealer hand\n          let drawn_card = {\n            value: `${card.value}`,\n            suit: `${card.suit}`,\n            imageURL: `${card.image}`,\n            cardCode: `${card.code}`\n          };\n          switch (card.value) {\n            case \"ACE\":\n              setPlayerHandValue(Number(11) + playerHandValue);\n              setPlayerAceCount(Number(1) + playerAceCount);\n              break;\n            case \"KING\":\n              setPlayerHandValue(Number(10) + playerHandValue);\n              break;\n            case \"QUEEN\":\n              setPlayerHandValue(Number(10) + playerHandValue);\n              break;\n            case \"JACK\":\n              setPlayerHandValue(Number(10) + playerHandValue);\n              break;\n            default:\n              setPlayerHandValue(Number(card.value) + playerHandValue);\n              break;\n          }\n          player_hand.push(drawn_card);\n          updateRender(n => !n);\n          if (playerHandValue > 21) {\n            computeHand();\n          }\n        } catch (err) {\n          console.log(\"failed to parse JSON for desired values\");\n        }\n      });\n  }\n\n  function playerStay() {\n    //show dealer card\n    if (dealerCardHidden === true) {\n      console.log(setDealerFirstCardURL);\n      dealer_hand[0].imageURL = dealerFirstCardURL;\n      setDealerCardHidden(false);\n      updateRender(n => !n);\n    }\n    if (dealerHandValue < 16) {\n      drawDealer();\n    } else {\n      //dealer draws\n      computeHand();\n    }\n  }\n\n  async function computeHand() {\n    if (playerHandValue > 21) {\n      if (playerAceCount > 0) {\n        setPlayerAceCount(playerAceCount - 1);\n        setPlayerHandValue(playerHandValue - 10);\n        console.log(\"used an Ace to save yourself\");\n      } else {\n        console.log(\"the player busted!!!\");\n        setDealerNumberWins(dealerNumberWins + 1);\n        await sleepDelay(3000);\n        newRound();\n      }\n    } else if (dealerHandValue > 21) {\n      if (dealerAceCount > 0) {\n        setDealerAceCount(dealerAceCount - 1);\n        setDealerHandValue(dealerHandValue - 10);\n        console.log(\"dealer used an Ace to save themself\");\n      } else {\n        console.log(\"the dealer busted!!\");\n        setPlayerNumberWins(playerNumberWins + 1);\n        await sleepDelay(3000);\n        newRound();\n      }\n    } else if (playerHandValue === dealerHandValue) {\n      console.log(\"push\");\n      await sleepDelay(3000);\n      newRound();\n    } else if (playerHandValue > dealerHandValue) {\n      setPlayerNumberWins(playerNumberWins + 1);\n      console.log(\"Player wins!!\");\n      await sleepDelay(3000);\n      newRound();\n    } else {\n      setDealerNumberWins(dealerNumberWins + 1);\n      console.log(\"Dealer wins...\");\n      await sleepDelay(3000);\n      newRound();\n    }\n  }\n\n  function drawDealer() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`)\n      .then(result => {\n        result.data.success && console.log(`We successfully drew cards!!`);\n\n        setCardsRemaining(result.data.remaining);\n        try {\n          let card = result.data.cards[0];\n          //create a card object to push onto the player or dealer hand\n          let drawn_card = {\n            value: `${card.value}`,\n            suit: `${card.suit}`,\n            imageURL: `${card.image}`,\n            cardCode: `${card.code}`\n          };\n          switch (card.value) {\n            case \"ACE\":\n              setDealerHandValue(Number(11) + dealerHandValue);\n              setDealerAceCount(Number(1) + dealerAceCount);\n              break;\n            case \"KING\":\n              setDealerHandValue(Number(10) + dealerHandValue);\n              break;\n            case \"QUEEN\":\n              setDealerHandValue(Number(10) + dealerHandValue);\n              break;\n            case \"JACK\":\n              setDealerHandValue(Number(10) + dealerHandValue);\n              break;\n            default:\n              setDealerHandValue(Number(card.value) + dealerHandValue);\n              break;\n          }\n          dealer_hand.push(drawn_card);\n          if (dealer_hand.length === 1) {\n            setDealerFirstCardURL(dealer_hand[0].imageURL);\n            dealer_hand[0].imageURL = hiddenCardImage;\n            setDealerCardHidden(true);\n          }\n          updateRender(n => !n);\n          if (dealerHandValue > 21) {\n            computeHand();\n          }\n        } catch (err) {\n          console.log(\"failed to parse JSON for desired values\");\n        }\n      });\n  }\n\n  function sleepDelay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  return (\n    <>\n      <DisplayCardsDiv>\n        <DisplayHand type=\"player\">\n          <h2>Player Cards</h2>\n          {player_hand.map(card => {\n            return (\n              <img\n                src={`${card.imageURL}`}\n                alt={`${card.value} of ${card.suit}`}\n              />\n            );\n          })}\n        </DisplayHand>\n        <DisplayHand>\n          <h2>Dealer Cards</h2>\n          {dealer_hand.map(card => {\n            return (\n              <img\n                src={`${card.imageURL}`}\n                alt={`${card.value} of ${card.suit}`}\n              />\n            );\n          })}\n        </DisplayHand>\n      </DisplayCardsDiv>\n\n      <GameControlsDiv>\n        <GameControlsButtonDiv>\n          <GameControlButton onClick={startNewGame}>New Game</GameControlButton>\n          <GameControlButton onClick={playerStay}>Stay</GameControlButton>\n          <GameControlButton onClick={drawCard}>Hit</GameControlButton>\n          <GameControlButton onClick={drawDealer}>\n            Dealer Draw\n          </GameControlButton>\n        </GameControlsButtonDiv>\n        <p>The deck ID is: {deckId}</p>\n        <p>Total cards remaining in the deck: {cardsRemaining}</p>\n        <p>Player hand value: {playerHandValue}</p>\n        <p>Dealer hand value: {dealerHandValue}</p>\n        <p>Player num wins: {playerNumberWins}</p>\n        <p>Dealer num wins: {dealerNumberWins}</p>\n\n        {/* <p>{data}</p> */}\n        {/* <Image src={CardsOnFire} rounded />\n      <p>Photo by Julius Drost on Unsplash</p> */}\n      </GameControlsDiv>\n    </>\n  );\n}\n\nexport default Blackjack;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport {\n  DisplayHand,\n  DisplayCardsDiv,\n  GameControlsDiv,\n  GameControlsButtonDiv,\n  GameControlButton\n} from \"styles\";\n\nlet player_pile = []; //cards the player has\nlet player_card = []; //card the player drew\n\nlet dealer_pile = []; //cards the dealer has\nlet dealer_card = []; //card the dealer drew\n\nfunction War() {\n  const [deckId, setDeckId] = useState(0);\n  const [shuffled, setShuffled] = useState(\"\");\n  const [cardsRemaining, setCardsRemaining] = useState(\"\");\n  const [, updateRender] = useState();\n  //   const [playerNumberWins, setPlayerNumberWins] = useState(0);\n  //   const [dealerNumberWins, setDealerNumberWins] = useState(0);\n  void shuffled;\n\n  // Create a new deck of cards and store the deck id for future API calls\n  function startNewGame() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\n      .then(result => {\n        result.data.success && console.log(\"The result was a success!!\");\n\n        setDeckId(result.data.deck_id);\n        setShuffled(result.data.shuffled);\n        setCardsRemaining(result.data.remaining);\n        console.log(result.data.deck_id);\n        deckId = result.data.deck_id;\n        //clear the cards in the player and dealer hands\n        player_pile = [];\n        dealer_pile = [];\n        //split the cards evenly between player and dealer\n        splitDeck();\n      })\n      .catch(error => console.log(error));\n  }\n\n  function splitDeck() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=2`)\n      .then(result => {\n        result.data.success && console.log(\"The split was a success!!\");\n        var i;\n        for (i = 0; i < result.data.remaining / 2; i += 2) {\n          let card = result.data.cards[i];\n          //create a card object to push onto the player hand\n          let drawn_card1 = {\n            value: `${card.value}`,\n            suit: `${card.suit}`,\n            imageURL: `${card.image}`,\n            cardCode: `${card.code}`\n          };\n\n          card = result.data.cards[i + 1];\n          //create a card object to push onto the dealer hand\n          let drawn_card2 = {\n            value: `${card.value}`,\n            suit: `${card.suit}`,\n            imageURL: `${card.image}`,\n            cardCode: `${card.code}`\n          };\n\n          //add 1 card to both player and dealer piles\n          player_pile.push(drawn_card1);\n          console.log(drawn_card1.value);\n          dealer_pile.push(drawn_card2);\n          console.log(drawn_card2.value);\n        }\n      });\n  }\n\n  function draw() {\n    if (player_pile) {\n      player_card.push(player_pile.pop());\n      dealer_card.push(dealer_pile.pop());\n      //    console.log(player_card.value)\n      //    console.log(dealer_card.value)\n    }\n  }\n\n  return (\n    <>\n      <DisplayCardsDiv>\n        <DisplayHand type=\"player\">\n          <h2>Player Card</h2>\n          {player_card &&\n            player_card.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n        </DisplayHand>\n        <DisplayHand>\n          <h2>Dealer Card</h2>\n          {dealer_card &&\n            dealer_card.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n        </DisplayHand>\n      </DisplayCardsDiv>\n\n      <GameControlsDiv>\n        <GameControlsButtonDiv>\n          <GameControlButton onClick={startNewGame}>New Game</GameControlButton>\n          <GameControlButton onClick={draw}>Hit</GameControlButton>\n          <GameControlButton>Dealer Draw</GameControlButton>\n        </GameControlsButtonDiv>\n        <h1>Welcome to WAR!</h1>\n        <p>The deck ID is: {deckId}</p>\n        <p>Player has: {player_pile.length} cards.</p>\n        <p>Dealer has: {dealer_pile.length} cards.</p>\n      </GameControlsDiv>\n    </>\n  );\n}\n\nexport default War;\n","import React from \"react\";\nimport styled from \"styled-components\";\n// import { Homepage } from \"styles\";\n\nfunction Homepage() {\n  return <h1>Homepage</h1>;\n}\n\nexport default Homepage;\n","import React from \"react\";\nimport { StyledLink, NavBarContainer } from \"styles\";\n\nfunction NavBar() {\n  return (\n    <>\n      <NavBarContainer>\n        <StyledLink type=\"first\" to=\"/card-games/\">\n          View All Games\n        </StyledLink>\n        <StyledLink to=\"/card-games/blackjack\">Blackjack</StyledLink>\n        <StyledLink type=\"last\" to=\"/card-games/war\">\n          War\n        </StyledLink>\n      </NavBarContainer>\n    </>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Blackjack, Homepage, NavBar, War } from \"./GameComponents\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { StyledFooter } from \"styles\";\nimport \"./styles/background.css\";\nimport \"./styles/rootStyle.css\";\n\ndocument.title = \"React Card Games\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <Switch>\n        <Route path=\"/card-games/\" component={Homepage} exact />\n        <Route path=\"/card-games/blackjack\" component={Blackjack} />\n        <Route path=\"/card-games/war\" component={War} />\n        <Route component={Homepage} />\n      </Switch>\n      <StyledFooter>\n        <p>Check out the source code on github!</p>\n        <p>Image from Julius Drost on Unsplash.com</p>\n      </StyledFooter>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}