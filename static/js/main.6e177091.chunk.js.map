{"version":3,"sources":["images/julius-drost-C8wlYF8ubBo-unsplash.jpg","images/michal-soukup-k2OGxffv3VY-unsplash.jpg","images/justin-campbell-FacLsqkeX4w-unsplash.jpg","styles/navStyle.js","styles/footerStyle.js","styles/displayCardsStyle.js","styles/gameControlsStyle.js","styles/HomepageStyle.js","styles/flex.js","GameComponents/Blackjack.js","GameComponents/War.js","GameComponents/Homepage.js","GameComponents/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledLink","styled","NavLink","type","NavBarContainer","div","StyledFooter","DisplayCardsDiv","DisplayHand","GameControlsDiv","GameControlsButtonDiv","GameControlButton","button","DisplayGameStats","HomepageStyle","FlexBox","player_hand","dealer_hand","Blackjack","useState","deckId","setDeckId","playerHandValue","setPlayerHandValue","dealerHandValue","setDealerHandValue","playerAceCount","setPlayerAceCount","dealerAceCount","setDealerAceCount","playerNumberWins","setPlayerNumberWins","dealerNumberWins","setDealerNumberWins","dealerFirstCardURL","setDealerFirstCardURL","dealerCardHidden","setDealerCardHidden","updateRender","hiddenCardImage","CardsOnFire","newRound","n","computeHand","a","console","log","sleepDelay","drawDealer","axios","get","then","result","data","success","card","cards","drawn_card","value","suit","imageURL","image","cardCode","code","Number","push","length","err","ms","Promise","resolve","setTimeout","onClick","deck_id","catch","error","map","src","alt","player_pile","player_card","dealer_pile","dealer_card","War","curDeck","setShuffled","drawTie","i","pop","computeFlipWinner","player_score","getCardValue","dealer_score","addCard","pile","faceUp","gameWon","pc","dc","shuffled","card1","drawn_card1","card2","drawn_card2","cp","cd","Homepage","to","Casino","Tank","NavBar","document","title","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e177091.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/julius-drost-C8wlYF8ubBo-unsplash.b3dc39d0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/michal-soukup-k2OGxffv3VY-unsplash.a5599685.jpg\";","module.exports = __webpack_public_path__ + \"static/media/justin-campbell-FacLsqkeX4w-unsplash.880e55d8.jpg\";","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const StyledLink = styled(NavLink)`\n  font-size: 12px;\n  color: white;\n  font-family: helvetica;\n  text-transform: uppercase;\n  text-decoration: none;\n  background-color: darkgreen;\n  display: block;\n  padding: 10px 34px;\n  transition: all 1s linear;\n  box-shadow: inset 0px 0px 30px #888;\n  border-right: ${({ type }) => (type === \"last\" ? \"0\" : \"1px solid #ccc\")};\n  ${({ type }) => type === \"first\" && \"border-radius: 10px 0 0 10px\"};\n  ${({ type }) => type === \"last\" && \"border-radius: 0 10px 10px 0\"};\n  &:hover {\n    background-color: #eee;\n    color: #333;\n    box-shadow: inset 0px 0px 30px #ccc;\n  }\n`;\n\nexport const NavBarContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 25px auto 25px auto;\n  width: 700px;\n  height: 38px;\n  padding: 0px;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledFooter = styled.div`\n  height: 100px;\n  p {\n    text-align: center;\n    color: white;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const DisplayCardsDiv = styled.div`\n  width: 850px;\n  margin: auto;\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const DisplayHand = styled.div`\n  width: 400px;\n  ${\"\" /* float: ${({ type }) => (type === \"player\" ? \"left\" : \"right\")}; */}\n  background-color: ${({ type }) =>\n    type === \"player\" ? \"darkgreen\" : \"#4F265B\"};\n  h2 {\n    text-align: center;\n    background-color: lightgrey;\n  }\n  img {\n    padding: 5px;\n    height: 175px;\n    width: 123px;\n    float: left;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const GameControlsDiv = styled.div`\n  padding: 15px;\n  margin: auto;\n  p {\n    padding-top: 5px;\n    text-align: center;\n  }\n  background-color: white;\n  border-radius: 10px;\n  height: 180px;\n`;\n\nexport const GameControlsButtonDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 9vw;\n`;\n\nexport const GameControlButton = styled.button`\n  width: 125px;\n  background-color: lightgreen;\n  padding: 10px;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  border-radius: 10px;\n  &:hover {\n    background-color: orange;\n    box-shadow: inset 0px 0px 30px #ccc;\n  }\n`;\n\nexport const DisplayGameStats = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 15px;\n  margin: auto;\n  p {\n    padding-top: 5px;\n    text-align: center;\n  }\n  background-color: white;\n  border-radius: 10px;\n  height: 180px;\n  width: 9vw;\n`;\n","import styled from \"styled-components\";\n\nexport const HomepageStyle = styled.div`\n  font-size: 12px;\n  text-align: center;\n  font-family: helvetica;\n  display: block;\n  padding: 10px 34px;\n  box-shadow: inset 0px 0px 30px #888;\n  img {\n    border-radius: 15px;\n    padding: 10px;\n  }\n  h1 {\n    color: white;\n    text-transform: uppercase;\n    font-size: 30px;\n  }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const FlexBox = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { CardsOnFire } from \"images\";\nimport {\n  DisplayHand,\n  DisplayCardsDiv,\n  DisplayGameStats,\n  FlexBox,\n  GameControlsDiv,\n  GameControlsButtonDiv,\n  GameControlButton\n} from \"styles\";\n\nlet player_hand = [];\nlet dealer_hand = [];\n\nfunction Blackjack() {\n  const [deckId, setDeckId] = useState(0);\n  const [playerHandValue, setPlayerHandValue] = useState(0);\n  const [dealerHandValue, setDealerHandValue] = useState(0);\n  const [playerAceCount, setPlayerAceCount] = useState(0);\n  const [dealerAceCount, setDealerAceCount] = useState(0);\n  const [playerNumberWins, setPlayerNumberWins] = useState(0);\n  const [dealerNumberWins, setDealerNumberWins] = useState(0);\n  const [dealerFirstCardURL, setDealerFirstCardURL] = useState(\"\");\n  const [dealerCardHidden, setDealerCardHidden] = useState(true);\n  const [, updateRender] = useState(\"\");\n  const hiddenCardImage = CardsOnFire;\n\n  // Create a new deck of cards and store the deck id for future API calls\n  function startNewGame() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n      .then(result => {\n        result.data.success && console.log(\"The result was a success!!\");\n\n        setDeckId(result.data.deck_id);\n        newRound();\n      })\n      .catch(error => console.log(error));\n  }\n\n  function newRound() {\n    player_hand = [];\n    dealer_hand = [];\n    setPlayerAceCount(0);\n    setDealerAceCount(0);\n    setDealerHandValue(0);\n    setPlayerHandValue(0);\n    setDealerCardHidden(\"\");\n    updateRender(n => !n);\n  }\n\n  function drawCard() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`)\n      .then(result => {\n        result.data.success && console.log(`We successfully drew cards!!`);\n\n        try {\n          let card = result.data.cards[0];\n          //create a card object to push onto the player or dealer hand\n          let drawn_card = {\n            value: `${card.value}`,\n            suit: `${card.suit}`,\n            imageURL: `${card.image}`,\n            cardCode: `${card.code}`\n          };\n          switch (card.value) {\n            case \"ACE\":\n              setPlayerHandValue(Number(11) + playerHandValue);\n              setPlayerAceCount(Number(1) + playerAceCount);\n              break;\n            case \"KING\":\n              setPlayerHandValue(Number(10) + playerHandValue);\n              break;\n            case \"QUEEN\":\n              setPlayerHandValue(Number(10) + playerHandValue);\n              break;\n            case \"JACK\":\n              setPlayerHandValue(Number(10) + playerHandValue);\n              break;\n            default:\n              setPlayerHandValue(Number(card.value) + playerHandValue);\n              break;\n          }\n          player_hand.push(drawn_card);\n          updateRender(n => !n);\n          if (playerHandValue > 21) {\n            computeHand();\n          }\n        } catch (err) {\n          console.log(\"failed to parse JSON for desired values\");\n        }\n      });\n  }\n\n  function playerStay() {\n    //show dealer card\n    if (dealerCardHidden === true) {\n      console.log(setDealerFirstCardURL);\n      dealer_hand[0].imageURL = dealerFirstCardURL;\n      setDealerCardHidden(false);\n      updateRender(n => !n);\n    }\n    if (dealerHandValue < 16) {\n      drawDealer();\n    } else {\n      //dealer draws\n      computeHand();\n    }\n  }\n\n  async function computeHand() {\n    if (playerHandValue > 21) {\n      if (playerAceCount > 0) {\n        setPlayerAceCount(playerAceCount - 1);\n        setPlayerHandValue(playerHandValue - 10);\n        console.log(\"used an Ace to save yourself\");\n      } else {\n        console.log(\"the player busted!!!\");\n        setDealerNumberWins(dealerNumberWins + 1);\n        await sleepDelay(3000);\n        newRound();\n      }\n    } else if (dealerHandValue > 21) {\n      if (dealerAceCount > 0) {\n        setDealerAceCount(dealerAceCount - 1);\n        setDealerHandValue(dealerHandValue - 10);\n        console.log(\"dealer used an Ace to save themself\");\n      } else {\n        console.log(\"the dealer busted!!\");\n        setPlayerNumberWins(playerNumberWins + 1);\n        await sleepDelay(3000);\n        newRound();\n      }\n    } else if (playerHandValue === dealerHandValue) {\n      console.log(\"push\");\n      await sleepDelay(3000);\n      newRound();\n    } else if (playerHandValue > dealerHandValue) {\n      setPlayerNumberWins(playerNumberWins + 1);\n      console.log(\"Player wins!!\");\n      await sleepDelay(3000);\n      newRound();\n    } else {\n      setDealerNumberWins(dealerNumberWins + 1);\n      console.log(\"Dealer wins...\");\n      await sleepDelay(3000);\n      newRound();\n    }\n  }\n\n  function drawDealer() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`)\n      .then(result => {\n        result.data.success && console.log(`We successfully drew cards!!`);\n\n        try {\n          let card = result.data.cards[0];\n          //create a card object to push onto the player or dealer hand\n          let drawn_card = {\n            value: `${card.value}`,\n            suit: `${card.suit}`,\n            imageURL: `${card.image}`,\n            cardCode: `${card.code}`\n          };\n          switch (card.value) {\n            case \"ACE\":\n              setDealerHandValue(Number(11) + dealerHandValue);\n              setDealerAceCount(Number(1) + dealerAceCount);\n              break;\n            case \"KING\":\n              setDealerHandValue(Number(10) + dealerHandValue);\n              break;\n            case \"QUEEN\":\n              setDealerHandValue(Number(10) + dealerHandValue);\n              break;\n            case \"JACK\":\n              setDealerHandValue(Number(10) + dealerHandValue);\n              break;\n            default:\n              setDealerHandValue(Number(card.value) + dealerHandValue);\n              break;\n          }\n          dealer_hand.push(drawn_card);\n          if (dealer_hand.length === 1) {\n            setDealerFirstCardURL(dealer_hand[0].imageURL);\n            dealer_hand[0].imageURL = hiddenCardImage;\n            setDealerCardHidden(true);\n          }\n          updateRender(n => !n);\n          if (dealerHandValue > 21) {\n            computeHand();\n          }\n        } catch (err) {\n          console.log(\"failed to parse JSON for desired values\");\n        }\n      });\n  }\n\n  function sleepDelay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  return (\n    <>\n      <FlexBox>\n        <GameControlsDiv>\n          <GameControlsButtonDiv>\n            <GameControlButton onClick={startNewGame}>\n              New Game\n            </GameControlButton>\n            <GameControlButton onClick={playerStay}>Stay</GameControlButton>\n            <GameControlButton onClick={drawCard}>Hit</GameControlButton>\n            <GameControlButton onClick={drawDealer}>\n              Dealer Draw\n            </GameControlButton>\n          </GameControlsButtonDiv>\n        </GameControlsDiv>\n        <DisplayCardsDiv>\n          <DisplayHand type=\"player\">\n            <h2>Player Cards</h2>\n            {player_hand.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n          </DisplayHand>\n          <DisplayHand>\n            <h2>Dealer Cards</h2>\n            {dealer_hand.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n          </DisplayHand>\n        </DisplayCardsDiv>\n        <DisplayGameStats>\n          <p>Hand value: {playerHandValue}</p>\n          {/* <p>Dealer hand value: {dealerHandValue}</p> */}\n          <p>Player wins: {playerNumberWins}</p>\n          <p>Dealer wins: {dealerNumberWins}</p>\n        </DisplayGameStats>\n      </FlexBox>\n    </>\n  );\n}\n\nexport default Blackjack;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport {\n  DisplayHand,\n  DisplayCardsDiv,\n  GameControlsDiv,\n  GameControlsButtonDiv,\n  GameControlButton,\n  FlexBox,\n  DisplayGameStats\n} from \"styles\";\nimport { CardsOnFire } from \"images\";\n\nlet player_pile = []; //cards the player has\nlet player_card = []; //card the player drew\n\nlet dealer_pile = []; //cards the dealer has\nlet dealer_card = []; //card the dealer drew\n\nfunction War() {\n  const [shuffled, setShuffled] = useState(\"\");\n  const [, updateRender] = useState();\n  const hiddenCardImage = CardsOnFire;\n  let curDeck;\n  void shuffled;\n\n  // Create a new deck of cards and store the deck id for future API calls\n  function startNewGame() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\n      .then(result => {\n        result.data.success && console.log(\"Deck obtained\");\n\n        setShuffled(result.data.shuffled);\n        curDeck = result.data.deck_id;\n        //clear the cards in the player and dealer hands\n        player_pile = [];\n        dealer_pile = [];\n        //split the deck\n        axios\n          .get(`https://deckofcardsapi.com/api/deck/${curDeck}/draw/?count=52`)\n          .then(result => {\n            result.data.success && console.log(\"Beginning split\");\n\n            let i;\n            for (i = 0; i < 52; i += 2) {\n              let card1 = result.data.cards[i];\n              //create a card object to push onto the player hand\n              let drawn_card1 = {\n                value: `${card1.value}`,\n                suit: `${card1.suit}`,\n                imageURL: `${card1.image}`,\n                cardCode: `${card1.code}`,\n                faceUp: `${card1.image}`\n              };\n\n              let card2 = result.data.cards[i + 1];\n              //create a card object to push onto the dealer hand\n              let drawn_card2 = {\n                value: `${card2.value}`,\n                suit: `${card2.suit}`,\n                imageURL: `${card2.image}`,\n                cardCode: `${card2.code}`,\n                faceUp: `${card2.image}`\n              };\n\n              //add 1 card to both player and dealer piles\n              player_pile.push(drawn_card1);\n              dealer_pile.push(drawn_card2);\n            }\n            updateRender(n => !n);\n          })\n          .catch(error => console.log(error));\n      })\n      .catch(error => console.log(error));\n  }\n\n  function draw() {\n    //reset the pile for each player\n    dealer_card = [];\n    player_card = [];\n    if (!gameWon()) {\n      let cp = player_pile.pop();\n      let cd = dealer_pile.pop();\n      if (!(cp === \"undefined\" && cd === \"undefined\")) {\n        player_card.push(cp);\n        dealer_card.push(cd);\n        updateRender(n => !n);\n        computeFlipWinner();\n      }\n    } else {\n      gameWon();\n      updateRender(n => !n);\n    }\n  }\n\n  async function drawTie() {\n    let i;\n    for (\n      i = 0;\n      i < 3;\n      i++ //flip 3 cards face down\n    ) {\n      player_card.push(player_pile.pop());\n      player_card[player_card.length - 1].imageURL = hiddenCardImage;\n\n      dealer_card.push(dealer_pile.pop());\n      dealer_card[dealer_card.length - 1].imageURL = hiddenCardImage;\n    }\n    player_card.push(player_pile.pop());\n    dealer_card.push(dealer_pile.pop());\n    await sleepDelay(1);\n    updateRender(n => !n);\n    computeFlipWinner();\n  }\n\n  //computes who won the flip\n  async function computeFlipWinner() {\n    //get player card value\n    let player_score = getCardValue(player_card[player_card.length - 1]);\n    //get deal card value\n    let dealer_score = getCardValue(dealer_card[dealer_card.length - 1]);\n\n    if (player_score === dealer_score) {\n      //its a tie\n      console.log(\"Tie\");\n      drawTie();\n    } else if (player_score > dealer_score) {\n      //player wins the flip\n      console.log(\"Player wins this round\");\n      while (player_card.length > 0) {\n        await sleepDelay(1);\n        addCard(player_pile, player_card.pop());\n        addCard(player_pile, dealer_card.pop());\n      }\n    } else {\n      //dealer wins\n      console.log(\"Dealer wins this round\");\n      while (player_card.length > 0) {\n        await sleepDelay(1);\n        addCard(dealer_pile, player_card.pop());\n        addCard(dealer_pile, dealer_card.pop());\n      }\n    }\n  }\n\n  //Gets te value of a given card\n  function getCardValue(card) {\n    switch (card.value) {\n      case \"ACE\": //highest value card in the game\n        return 14;\n      case \"KING\":\n        return 13;\n      case \"QUEEN\":\n        return 12;\n      case \"JACK\":\n        return 11;\n      default:\n        return card.value;\n    }\n  }\n\n  //Adds the given card to the given pile\n  function addCard(pile, card) {\n    let i;\n    card.imageURL = card.faceUp;\n    for (i = pile.length; i > 0; i--) {\n      pile[i] = pile[i - 1];\n    }\n    pile[0] = card;\n  }\n\n  //checks if either player has an empty deck\n  function gameWon() {\n    console.log(\"P: \" + player_pile.length + \" D: \" + dealer_pile.length);\n    if (player_pile.length === 0) {\n      return true;\n    }\n    if (dealer_pile.length === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  function sleepDelay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async function winP() {\n    dealer_card = [];\n    player_card = [];\n    if (!gameWon()) {\n      player_card.push(player_pile.pop());\n      dealer_card.push(dealer_pile.pop());\n      updateRender(n => !n);\n    }\n    try {\n      await sleepDelay(1);\n      let pc = player_card.pop();\n      let dc = dealer_card.pop();\n      addCard(player_pile, pc);\n      addCard(player_pile, dc);\n    } catch (error) {}\n  }\n  async function winD() {\n    dealer_card = [];\n    player_card = [];\n    if (!gameWon()) {\n      player_card.push(player_pile.pop());\n      dealer_card.push(dealer_pile.pop());\n      updateRender(n => !n);\n    }\n    try {\n      await sleepDelay(1);\n      let pc = player_card.pop();\n      let dc = dealer_card.pop();\n      addCard(dealer_pile, pc);\n      addCard(dealer_pile, dc);\n    } catch (error) {}\n  }\n  return (\n    <>\n      <FlexBox>\n        <GameControlsDiv>\n          <GameControlsButtonDiv>\n            <GameControlButton onClick={startNewGame}>\n              New Game\n            </GameControlButton>\n            <GameControlButton onClick={draw}>Hit</GameControlButton>\n            <GameControlButton onClick={winP}>\n              Force Player Win\n            </GameControlButton>\n            <GameControlButton onClick={winD}>\n              Force Dealer Win\n            </GameControlButton>\n          </GameControlsButtonDiv>\n        </GameControlsDiv>\n        <DisplayCardsDiv>\n          <DisplayHand type=\"player\">\n            <h2>Player Card</h2>\n            {player_card.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n          </DisplayHand>\n          <DisplayHand>\n            <h2>Dealer Card</h2>\n            {dealer_card.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n          </DisplayHand>\n        </DisplayCardsDiv>\n\n        <DisplayGameStats>\n          <p>Player cards: {player_pile.length}</p>\n          <p>Dealer cards: {dealer_pile.length}</p>\n          <p>{/*winner*/}</p>\n        </DisplayGameStats>\n      </FlexBox>\n    </>\n  );\n}\n\nexport default War;\n","import React from \"react\";\nimport { HomepageStyle } from \"styles\";\nimport { Casino, Tank } from \"images\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Homepage() {\n  return (\n    <>\n      <HomepageStyle>\n        <h1>Please select a game!</h1>\n        {/* <a href=\"https://timparrish.github.io/card-games/blackjack\"> */}\n        <NavLink to=\"/card-games/blackjack\">\n          <img src={Casino} alt={\"Neon casino marquee sign at night\"} />\n        </NavLink>\n        <NavLink to=\"/card-games/war\">\n          <img\n            src={Tank}\n            alt={\"Tank on a dirt road with the sky in the background\"}\n          />\n        </NavLink>\n      </HomepageStyle>\n    </>\n  );\n}\n\nexport default Homepage;\n","import React from \"react\";\nimport { StyledLink, NavBarContainer } from \"styles\";\n\nfunction NavBar() {\n  return (\n    <>\n      <NavBarContainer>\n        <StyledLink type=\"first\" to=\"/card-games/\">\n          View All Games\n        </StyledLink>\n        <StyledLink to=\"/card-games/blackjack\">Blackjack</StyledLink>\n        <StyledLink type=\"last\" to=\"/card-games/war\">\n          War\n        </StyledLink>\n      </NavBarContainer>\n    </>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Blackjack, Homepage, NavBar, War } from \"./GameComponents\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { StyledFooter } from \"styles\";\nimport \"./styles/background.css\";\nimport \"./styles/rootStyle.css\";\n\ndocument.title = \"React Card Games\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <Switch>\n        <Route path=\"/card-games/\" component={Homepage} exact />\n        <Route path=\"/card-games/blackjack\" component={Blackjack} />\n        <Route path=\"/card-games/war\" component={War} />\n        <Route component={Homepage} />\n      </Switch>\n      <StyledFooter>\n        <p>Check out the source code on github!</p>\n      </StyledFooter>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}