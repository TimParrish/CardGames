{"version":3,"sources":["images/julius-drost-C8wlYF8ubBo-unsplash.jpg","images/michal-soukup-k2OGxffv3VY-unsplash.jpg","images/justin-campbell-FacLsqkeX4w-unsplash.jpg","styles/navStyle.js","styles/footerStyle.js","styles/displayCardsStyle.js","utilities/responsiveDeviceSizes.js","styles/gameControlsStyle.js","styles/HomepageStyle.js","styles/flex.js","GameComponents/Blackjack.js","GameComponents/War.js","GameComponents/Homepage.js","GameComponents/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledLink","styled","NavLink","type","NavBarContainer","div","StyledFooter","DisplayCardsDiv","DisplayHand","size","GameControlsDiv","GameControlsButtonDiv","GameControlButton","button","DisplayGameStats","HomepageStyle","FlexBox","player_hand","dealer_hand","Blackjack","useState","deckId","setDeckId","playerHandValue","setPlayerHandValue","dealerHandValue","setDealerHandValue","playerAceCount","setPlayerAceCount","dealerAceCount","setDealerAceCount","playerNumberWins","setPlayerNumberWins","dealerNumberWins","setDealerNumberWins","dealerFirstCardURL","setDealerFirstCardURL","dealerCardHidden","setDealerCardHidden","updateRender","hiddenCardImage","CardsOnFire","startNewGame","axios","get","then","result","data","success","console","log","deck_id","newRound","catch","error","n","computeHand","a","sleepDelay","drawDealer","card","cards","drawn_card","value","suit","imageURL","image","cardCode","code","Number","push","length","err","ms","Promise","resolve","setTimeout","useEffect","onClick","map","src","alt","player_pile","player_card","dealer_pile","dealer_card","War","curDeck","setShuffled","shuffled","i","card1","drawn_card1","faceUp","card2","drawn_card2","drawTie","pop","computeFlipWinner","player_score","getCardValue","dealer_score","addCard","e","pile","gameWon","cp","cd","Homepage","to","Casino","Tank","NavBar","document","title","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df20de9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/julius-drost-C8wlYF8ubBo-unsplash.b3dc39d0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/michal-soukup-k2OGxffv3VY-unsplash.a5599685.jpg\";","module.exports = __webpack_public_path__ + \"static/media/justin-campbell-FacLsqkeX4w-unsplash.880e55d8.jpg\";","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const StyledLink = styled(NavLink)`\n  font-size: 12px;\n  color: white;\n  font-family: helvetica;\n  text-transform: uppercase;\n  text-decoration: none;\n  background-color: darkgreen;\n  display: block;\n  padding: 10px 34px;\n  transition: all 1s linear;\n  box-shadow: inset 0px 0px 30px #888;\n  border-right: ${({ type }) => (type === \"last\" ? \"0\" : \"1px solid #ccc\")};\n  ${({ type }) => type === \"first\" && \"border-radius: 10px 0 0 10px\"};\n  ${({ type }) => type === \"last\" && \"border-radius: 0 10px 10px 0\"};\n  &:hover {\n    background-color: #eee;\n    color: #333;\n    box-shadow: inset 0px 0px 30px #ccc;\n  }\n`;\n\nexport const NavBarContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 25px auto 25px auto;\n  width: 700px;\n  height: 38px;\n  padding: 0px;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledFooter = styled.div`\n  height: 100px;\n  p {\n    text-align: center;\n    color: white;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const DisplayCardsDiv = styled.div`\n  width: 850px;\n  margin: auto;\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const DisplayHand = styled.div`\n  width: 400px;\n  ${\"\" /* float: ${({ type }) => (type === \"player\" ? \"left\" : \"right\")}; */}\n  background-color: ${({ type }) =>\n    type === \"player\" ? \"darkgreen\" : \"#4F265B\"};\n  h2 {\n    text-align: center;\n    background-color: lightgrey;\n  }\n  img {\n    padding: 5px;\n    height: 175px;\n    width: 123px;\n    float: left;\n    border-radius: 10px;\n  }\n`;\n","const size = {\n  mobile: \"600px\",\n  tablet: \"800px\",\n  laptop: \"1000px\"\n};\n\nexport const deviceSize = {\n  mobile: `(max-width: ${size.mobile})`,\n  tablet: `(max-width: ${size.tablet})`,\n  laptop: `(max-width: ${size.laptop})`\n};\n","import styled from \"styled-components\";\nimport { deviceSize } from \"utilities\";\n\nexport const GameControlsDiv = styled.div`\n  padding: 15px;\n  margin: auto;\n  p {\n    padding-top: 5px;\n    text-align: center;\n  }\n  background-color: white;\n  border-radius: 10px;\n  height: 180px;\n`;\n\nexport const GameControlsButtonDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 9vw;\n`;\n\nexport const GameControlButton = styled.button`\n  width: 125px;\n  background-color: lightgreen;\n  padding: 10px;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  border-radius: 10px;\n  &:hover {\n    background-color: orange;\n    box-shadow: inset 0px 0px 30px #ccc;\n  }\n`;\n\nexport const DisplayGameStats = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 15px;\n  margin: auto;\n  p {\n    padding-top: 5px;\n    text-align: center;\n  }\n  background-color: white;\n  border-radius: 10px;\n  height: 180px;\n  width: 9vw;\n`;\n","import styled from \"styled-components\";\n\nexport const HomepageStyle = styled.div`\n  font-size: 12px;\n  text-align: center;\n  font-family: helvetica;\n  display: block;\n  padding: 10px 34px;\n  box-shadow: inset 0px 0px 30px #888;\n  img {\n    border-radius: 15px;\n    padding: 10px;\n  }\n  h1 {\n    color: white;\n    text-transform: uppercase;\n    font-size: 30px;\n  }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const FlexBox = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { CardsOnFire } from \"images\";\nimport {\n  DisplayHand,\n  DisplayCardsDiv,\n  DisplayGameStats,\n  FlexBox,\n  GameControlsDiv,\n  GameControlsButtonDiv,\n  GameControlButton\n} from \"styles\";\n\nlet player_hand = [];\nlet dealer_hand = [];\n\nfunction Blackjack() {\n  const [deckId, setDeckId] = useState(0);\n  const [playerHandValue, setPlayerHandValue] = useState(0);\n  const [dealerHandValue, setDealerHandValue] = useState(0);\n  const [playerAceCount, setPlayerAceCount] = useState(0);\n  const [dealerAceCount, setDealerAceCount] = useState(0);\n  const [playerNumberWins, setPlayerNumberWins] = useState(0);\n  const [dealerNumberWins, setDealerNumberWins] = useState(0);\n  const [dealerFirstCardURL, setDealerFirstCardURL] = useState(\"\");\n  const [dealerCardHidden, setDealerCardHidden] = useState(true);\n  const [, updateRender] = useState(\"\");\n  const hiddenCardImage = CardsOnFire;\n\n  //calls startNewGame() when th page loads\n  useEffect(() => {\n    startNewGame();\n  }, []);\n\n  // Create a new deck of cards and store the deck id for future API calls\n  function startNewGame() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=6`)\n      .then(result => {\n        result.data.success && console.log(\"The result was a success!!\");\n\n        setDeckId(result.data.deck_id);\n        newRound();\n      })\n      .catch(error => console.log(error));\n  }\n\n  function newRound() {\n    player_hand = [];\n    dealer_hand = [];\n    setPlayerAceCount(0);\n    setDealerAceCount(0);\n    setDealerHandValue(0);\n    setPlayerHandValue(0);\n    setDealerCardHidden(\"\");\n    updateRender(n => !n);\n  }\n\n  function drawCard() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`)\n      .then(result => {\n        result.data.success && console.log(`We successfully drew cards!!`);\n\n        try {\n          let card = result.data.cards[0];\n          //create a card object to push onto the player or dealer hand\n          let drawn_card = {\n            value: `${card.value}`,\n            suit: `${card.suit}`,\n            imageURL: `${card.image}`,\n            cardCode: `${card.code}`\n          };\n          switch (card.value) {\n            case \"ACE\":\n              setPlayerHandValue(Number(11) + playerHandValue);\n              setPlayerAceCount(Number(1) + playerAceCount);\n              break;\n            case \"KING\":\n              setPlayerHandValue(Number(10) + playerHandValue);\n              break;\n            case \"QUEEN\":\n              setPlayerHandValue(Number(10) + playerHandValue);\n              break;\n            case \"JACK\":\n              setPlayerHandValue(Number(10) + playerHandValue);\n              break;\n            default:\n              setPlayerHandValue(Number(card.value) + playerHandValue);\n              break;\n          }\n          player_hand.push(drawn_card);\n          updateRender(n => !n);\n          if (playerHandValue > 21) {\n            computeHand();\n          }\n        } catch (err) {\n          console.log(\"failed to parse JSON for desired values\");\n        }\n      });\n  }\n\n  function playerStay() {\n    //show dealer card\n    if (dealerCardHidden === true) {\n      console.log(setDealerFirstCardURL);\n      dealer_hand[0].imageURL = dealerFirstCardURL;\n      setDealerCardHidden(false);\n      updateRender(n => !n);\n    }\n    if (dealerHandValue < 16) {\n      drawDealer();\n    } else {\n      //dealer draws\n      computeHand();\n    }\n  }\n\n  async function computeHand() {\n    if (playerHandValue > 21) {\n      if (playerAceCount > 0) {\n        setPlayerAceCount(playerAceCount - 1);\n        setPlayerHandValue(playerHandValue - 10);\n        console.log(\"used an Ace to save yourself\");\n      } else {\n        console.log(\"the player busted!!!\");\n        setDealerNumberWins(dealerNumberWins + 1);\n        await sleepDelay(2000);\n        newRound();\n      }\n    } else if (dealerHandValue > 21) {\n      if (dealerAceCount > 0) {\n        setDealerAceCount(dealerAceCount - 1);\n        setDealerHandValue(dealerHandValue - 10);\n        console.log(\"dealer used an Ace to save themself\");\n      } else {\n        console.log(\"the dealer busted!!\");\n        setPlayerNumberWins(playerNumberWins + 1);\n        await sleepDelay(2000);\n        newRound();\n      }\n    } else if (playerHandValue === dealerHandValue) {\n      console.log(\"push\");\n      await sleepDelay(2000);\n      newRound();\n    } else if (playerHandValue > dealerHandValue) {\n      setPlayerNumberWins(playerNumberWins + 1);\n      console.log(\"Player wins!!\");\n      await sleepDelay(2000);\n      newRound();\n    } else {\n      setDealerNumberWins(dealerNumberWins + 1);\n      console.log(\"Dealer wins...\");\n      await sleepDelay(2000);\n      newRound();\n    }\n  }\n\n  function drawDealer() {\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/?count=1`)\n      .then(result => {\n        result.data.success && console.log(`We successfully drew cards!!`);\n\n        try {\n          let card = result.data.cards[0];\n          //create a card object to push onto the player or dealer hand\n          let drawn_card = {\n            value: `${card.value}`,\n            suit: `${card.suit}`,\n            imageURL: `${card.image}`,\n            cardCode: `${card.code}`\n          };\n          switch (card.value) {\n            case \"ACE\":\n              setDealerHandValue(Number(11) + dealerHandValue);\n              setDealerAceCount(Number(1) + dealerAceCount);\n              break;\n            case \"KING\":\n              setDealerHandValue(Number(10) + dealerHandValue);\n              break;\n            case \"QUEEN\":\n              setDealerHandValue(Number(10) + dealerHandValue);\n              break;\n            case \"JACK\":\n              setDealerHandValue(Number(10) + dealerHandValue);\n              break;\n            default:\n              setDealerHandValue(Number(card.value) + dealerHandValue);\n              break;\n          }\n          dealer_hand.push(drawn_card);\n          if (dealer_hand.length === 1) {\n            setDealerFirstCardURL(dealer_hand[0].imageURL);\n            dealer_hand[0].imageURL = hiddenCardImage;\n            setDealerCardHidden(true);\n          }\n          if (dealerHandValue > 21) {\n            computeHand();\n          }\n          updateRender(n => !n);\n        } catch (err) {\n          console.log(\"failed to parse JSON for desired values\");\n        }\n      });\n  }\n\n  function sleepDelay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  return (\n    <>\n      <FlexBox>\n        <GameControlsDiv>\n          <GameControlsButtonDiv>\n            <GameControlButton onClick={drawCard}>Hit</GameControlButton>\n            <GameControlButton onClick={drawDealer}>\n              Dealer Draw\n            </GameControlButton>\n            <GameControlButton onClick={playerStay}>Stay</GameControlButton>\n            <GameControlButton onClick={startNewGame}>\n              New Game\n            </GameControlButton>\n          </GameControlsButtonDiv>\n        </GameControlsDiv>\n        <DisplayCardsDiv>\n          <DisplayHand type=\"player\">\n            <h2>Player Cards</h2>\n            {player_hand.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n          </DisplayHand>\n          <DisplayHand>\n            <h2>Dealer Cards</h2>\n            {dealer_hand.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n          </DisplayHand>\n        </DisplayCardsDiv>\n        <DisplayGameStats>\n          <p>Hand value: {playerHandValue}</p>\n          {/* <p>Dealer hand value: {dealerHandValue}</p> */}\n          <p>Player wins: {playerNumberWins}</p>\n          <p>Dealer wins: {dealerNumberWins}</p>\n        </DisplayGameStats>\n      </FlexBox>\n    </>\n  );\n}\n\nexport default Blackjack;\n","import React, { \n  useState,\n  useEffect\n } from \"react\";\nimport axios from \"axios\";\nimport {\n  DisplayHand,\n  DisplayCardsDiv,\n  GameControlsDiv,\n  GameControlsButtonDiv,\n  GameControlButton,\n  FlexBox,\n  DisplayGameStats\n} from \"styles\";\nimport { CardsOnFire } from \"images\";\n\nlet player_pile = []; //cards the player has\nlet player_card = []; //card the player drew\n\nlet dealer_pile = []; //cards the dealer has\nlet dealer_card = []; //card the dealer drew\n\nfunction War() {\n  const [shuffled, setShuffled] = useState(\"\");\n  const [, updateRender] = useState();\n  const hiddenCardImage = CardsOnFire;\n  let curDeck;\n  void shuffled;\n\n  //calls startNewGame() when th page loads\n  useEffect(() => {\n    startNewGame();\n  }, []);\n\n  // Create a new deck of cards and store the deck id for future API calls\n  function startNewGame() {\n    player_pile = [];\n    dealer_pile = [];\n    player_card = [];\n    dealer_card = [];\n    axios\n      .get(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\n      .then(result => {\n        result.data.success && console.log(\"Deck obtained\");\n\n        setShuffled(result.data.shuffled);\n        curDeck = result.data.deck_id;\n        //clear the cards in the player and dealer hands\n        player_pile = [];\n        dealer_pile = [];\n        //split the deck\n        axios\n          .get(`https://deckofcardsapi.com/api/deck/${curDeck}/draw/?count=52`)\n          .then(result => {\n            result.data.success && console.log(\"Beginning split\");\n\n            let i;\n            for (i = 0; i < 52; i += 2) {\n              let card1 = result.data.cards[i];\n              //create a card object to push onto the player hand\n              let drawn_card1 = {\n                value: `${card1.value}`,\n                suit: `${card1.suit}`,\n                imageURL: `${card1.image}`,\n                cardCode: `${card1.code}`,\n                faceUp: `${card1.image}`\n              };\n\n              let card2 = result.data.cards[i + 1];\n              //create a card object to push onto the dealer hand\n              let drawn_card2 = {\n                value: `${card2.value}`,\n                suit: `${card2.suit}`,\n                imageURL: `${card2.image}`,\n                cardCode: `${card2.code}`,\n                faceUp: `${card2.image}`\n              };\n\n              //add 1 card to both player and dealer piles\n              player_pile.push(drawn_card1);\n              dealer_pile.push(drawn_card2);\n            }\n            updateRender(n => !n);\n          })\n          .catch(error => console.log(error));\n      })\n      .catch(error => console.log(error));\n  }\n\n  function draw() {\n    try{\n      //reset the pile for each player\n      dealer_card = [];\n      player_card = [];\n      if (!gameWon()) {\n        let cp = player_pile.pop();\n        let cd = dealer_pile.pop();\n        if (!(cp === \"undefined\" && cd === \"undefined\")) {\n          player_card.push(cp);\n          dealer_card.push(cd);\n          updateRender(n => !n);\n          computeFlipWinner();\n        }\n      } else {\n        gameWon();\n        updateRender(n => !n);\n      }\n    }catch(e){}\n  }\n\n  async function drawTie() {\n    let i;\n    for (\n      i = 0;\n      i < 3;\n      i++ //flip 3 cards face down\n    ) {\n      player_card.push(player_pile.pop());\n      player_card[player_card.length - 1].imageURL = hiddenCardImage;\n\n      dealer_card.push(dealer_pile.pop());\n      dealer_card[dealer_card.length - 1].imageURL = hiddenCardImage;\n    }\n    player_card.push(player_pile.pop());\n    dealer_card.push(dealer_pile.pop());\n    await sleepDelay(1);\n    updateRender(n => !n);\n    computeFlipWinner();\n  }\n\n  //computes who won the flip\n  async function computeFlipWinner() {\n    //get player card value\n    let player_score = getCardValue(player_card[player_card.length - 1]);\n    //get deal card value\n    let dealer_score = getCardValue(dealer_card[dealer_card.length - 1]);\n\n    if (player_score === dealer_score) {\n      //its a tie\n      console.log(\"Tie\");\n      drawTie();\n    } else if (player_score > dealer_score) {\n      //player wins the flip\n      console.log(\"Player wins this round\");\n      while (player_card.length > 0) {\n        await sleepDelay(1);\n        addCard(player_pile, player_card.pop());\n        addCard(player_pile, dealer_card.pop());\n      }\n    } else {\n      //dealer wins\n      console.log(\"Dealer wins this round\");\n      while (player_card.length > 0) {\n        await sleepDelay(1);\n        addCard(dealer_pile, player_card.pop());\n        addCard(dealer_pile, dealer_card.pop());\n      }\n    }\n  }\n\n  //Gets te value of a given card\n  function getCardValue(card) {\n    try{\n      switch (card.value) {\n        case \"ACE\": //highest value card in the game\n          return 14;\n        case \"KING\":\n          return 13;\n        case \"QUEEN\":\n          return 12;\n        case \"JACK\":\n          return 11;\n        default:\n          return card.value;\n      }\n    }catch(e){}\n  }\n\n  //Adds the given card to the given pile\n  function addCard(pile, card) {\n    let i;\n    try{\n      card.imageURL = card.faceUp;\n      for (i = pile.length; i > 0; i--) {\n        pile[i] = pile[i - 1];\n      }\n      pile[0] = card;\n    }catch(e){}\n  }\n\n  //checks if either player has an empty deck\n  function gameWon() {\n    console.log(\"P: \" + player_pile.length + \" D: \" + dealer_pile.length);\n    if (player_pile.length === 0) {\n      return true;\n    }\n    if (dealer_pile.length === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  function sleepDelay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n/*  async function winP() {\n    dealer_card = [];\n    player_card = [];\n    if (!gameWon()) {\n      player_card.push(player_pile.pop());\n      dealer_card.push(dealer_pile.pop());\n      updateRender(n => !n);\n    }\n    try {\n      await sleepDelay(1);\n      let pc = player_card.pop();\n      let dc = dealer_card.pop();\n      addCard(player_pile, pc);\n      addCard(player_pile, dc);\n    } catch (error) {}\n  }\n  async function winD() {\n    dealer_card = [];\n    player_card = [];\n    if (!gameWon()) {\n      player_card.push(player_pile.pop());\n      dealer_card.push(dealer_pile.pop());\n      updateRender(n => !n);\n    }\n    try {\n      await sleepDelay(1);\n      let pc = player_card.pop();\n      let dc = dealer_card.pop();\n      addCard(dealer_pile, pc);\n      addCard(dealer_pile, dc);\n    } catch (error) {}\n  }*/\n  return (\n    <>\n      <FlexBox>\n        <GameControlsDiv>\n          <GameControlsButtonDiv>\n            <GameControlButton onClick={draw}>Hit</GameControlButton>\n            <GameControlButton onClick={startNewGame}>New Game</GameControlButton>\n           {/* <GameControlButton onClick={winP}>Force Player Win</GameControlButton>\n            <GameControlButton onClick={winD}>Force Dealer Win</GameControlButton>*/}\n          </GameControlsButtonDiv>\n        </GameControlsDiv>\n        <DisplayCardsDiv>\n          <DisplayHand type=\"player\">\n            <h2>Player Card</h2>\n            {player_card && player_card.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n          </DisplayHand>\n          <DisplayHand>\n            <h2>Dealer Card</h2>\n            {dealer_card && dealer_card.map(card => {\n              return (\n                <img\n                  src={`${card.imageURL}`}\n                  alt={`${card.value} of ${card.suit}`}\n                />\n              );\n            })}\n          </DisplayHand>\n        </DisplayCardsDiv>\n\n        <DisplayGameStats>\n          <p>Player cards: {player_pile.length}</p>\n          <p>Dealer cards: {dealer_pile.length}</p>\n          <p>{/*winner*/}</p>\n        </DisplayGameStats>\n      </FlexBox>\n    </>\n  );\n}\n\nexport default War;\n","import React from \"react\";\nimport { HomepageStyle } from \"styles\";\nimport { Casino, Tank } from \"images\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction Homepage() {\n  return (\n    <>\n      <HomepageStyle>\n        <h1>Please select a game!</h1>\n        {/* <a href=\"https://timparrish.github.io/card-games/blackjack\"> */}\n        <NavLink to=\"/card-games/blackjack\">\n          <img src={Casino} alt={\"Neon casino marquee sign at night\"} />\n        </NavLink>\n        <NavLink to=\"/card-games/war\">\n          <img\n            src={Tank}\n            alt={\"Tank on a dirt road with the sky in the background\"}\n          />\n        </NavLink>\n      </HomepageStyle>\n    </>\n  );\n}\n\nexport default Homepage;\n","import React from \"react\";\nimport { StyledLink, NavBarContainer } from \"styles\";\n\nfunction NavBar() {\n  return (\n    <>\n      <NavBarContainer>\n        <StyledLink type=\"first\" to=\"/card-games/\">\n          View All Games\n        </StyledLink>\n        <StyledLink to=\"/card-games/blackjack\">Blackjack</StyledLink>\n        <StyledLink type=\"last\" to=\"/card-games/war\">\n          War\n        </StyledLink>\n      </NavBarContainer>\n    </>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Blackjack, Homepage, NavBar, War } from \"./GameComponents\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { StyledFooter } from \"styles\";\nimport \"./styles/background.css\";\n\ndocument.title = \"ReactJS Card Games\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <Switch>\n        <Route path=\"/card-games/\" component={Homepage} exact />\n        <Route path=\"/card-games/blackjack\" component={Blackjack} />\n        <Route path=\"/card-games/war\" component={War} />\n        <Route component={Homepage} />\n      </Switch>\n      <StyledFooter>\n        <p>Check out the source code on github!</p>\n      </StyledFooter>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}